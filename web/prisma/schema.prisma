// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum StudentFilePermission {
  UPDATE
  VIEW
  HIDDEN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(STUDENT)

  userOnJamSession UserOnJamSession[]
  studentAnswer    StudentAnswer[]
  gradingSignedBy  StudentQuestionGrading[]
  groups           UserOnGroup[]
  groupsCreated    Group[]
}

enum Role {
  STUDENT
  PROFESSOR
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum QuestionType {
  multipleChoice
  trueFalse
  essay
  code
  web
}

model Group {
  id    String @id @default(cuid())
  label String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User?   @relation(fields: [createdById], references: [id])
  createdById String?

  members UserOnGroup[]

  questions   Question[]
  collections Collection[]
  tags        Tag[]
  JamSession  JamSession[]
}

model UserOnGroup {
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  group    Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId  String
  selected Boolean @default(false)

  @@id([userId, groupId])
}

model Collection {
  id    String @id @default(cuid())
  label String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  collectionToQuestions CollectionToQuestion[]

  group   Group  @relation(fields: [groupId], references: [id])
  groupId String
}

model CollectionToQuestion {
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String
  question     Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId   String

  order  Int @default(0)
  points Int @default(4)

  @@id([collectionId, questionId])
}

model Question {
  id      String       @id @default(cuid())
  type    QuestionType
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  multipleChoice MultipleChoice?
  trueFalse      TrueFalse?
  essay          Essay?
  code           Code?
  web            Web?

  collection CollectionToQuestion[]

  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String

  studentAnswer StudentAnswer[]
  questionToTag QuestionToTag[]
  jamSession    JamSessionToQuestion?
}

model MultipleChoice {
  id         String   @id @default(cuid())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String   @unique
  options    Option[]
}

model Option {
  id               String         @id @default(cuid())
  multipleChoice   MultipleChoice @relation(fields: [multipleChoiceId], references: [id], onDelete: Cascade)
  multipleChoiceId String
  text             String?
  isCorrect        Boolean        @default(false)

  studentAnswerMultipleChoice StudentAnswerMultipleChoice[]
}

model TrueFalse {
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String   @id
  isTrue     Boolean?
}

model Essay {
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String   @id
}

model SandBox {
  image     String
  beforeAll String?

  Code       Code   @relation(fields: [questionId], references: [questionId], onDelete: Cascade)
  questionId String @id @unique
}

model TestCase {
  index      Int
  code       Code   @relation(fields: [questionId], references: [questionId], onDelete: Cascade)
  questionId String

  exec           String
  input          String
  expectedOutput String

  @@id([index, questionId])
}

model Code {
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String   @id

  language String?

  sandbox SandBox?

  testCases TestCase[]

  solutionFiles CodeToSolutionFile[]
  templateFiles CodeToTemplateFile[]
  files         File[] // to casdade delete files
}

model CodeToSolutionFile {
  code Code @relation(fields: [questionId], references: [questionId], onDelete: Cascade)

  questionId String
  file       File   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId     String @unique

  @@id([questionId, fileId])
}

model CodeToTemplateFile {
  code Code @relation(fields: [questionId], references: [questionId], onDelete: Cascade)

  questionId String
  file       File   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId     String @unique

  studentPermission StudentFilePermission @default(UPDATE)

  @@id([questionId, fileId])
}

model File {
  id String @id @default(cuid())

  path    String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  codeToSolutionFile CodeToSolutionFile?
  codeToTemplateFile CodeToTemplateFile?
  studentAnswerCode  StudentAnswerCodeToFile?

  code       Code   @relation(fields: [questionId], references: [questionId], onDelete: Cascade)
  questionId String
}

model Web {
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String   @id
  html       String?
  css        String?
  js         String?
}

model Tag {
  label String @id @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  questionToTag QuestionToTag[]

  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String
}

model QuestionToTag {
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  tag        Tag      @relation(fields: [label], references: [label], onDelete: Cascade)
  label      String

  @@id([questionId, label])
}

// Order is important here
enum JamSessionPhase {
  NEW
  DRAFT
  IN_PROGRESS
  GRADING
  FINISHED
}

enum JamSessionStatus {
  ACTIVE
  ARCHIVED
}

model JamSession {
  id String @id @default(cuid())

  label      String?          @unique
  conditions String?
  status     JamSessionStatus @default(ACTIVE)
  phase      JamSessionPhase  @default(DRAFT)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  durationHours Int? @default(0)
  durationMins  Int? @default(0)

  startAt DateTime?
  endAt   DateTime?

  students              UserOnJamSession[]
  jamSessionToQuestions JamSessionToQuestion[]

  group   Group  @relation(fields: [groupId], references: [id])
  groupId String
}

model JamSessionToQuestion {
  jamSession   JamSession @relation(fields: [jamSessionId], references: [id], onDelete: Cascade)
  jamSessionId String

  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String   @unique

  points Int @default(0)
  order  Int @default(0)

  @@id([jamSessionId, questionId])
}

model UserOnJamSession {
  user      User   @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail String

  jamSession   JamSession @relation(fields: [jamSessionId], references: [id], onDelete: Cascade)
  jamSessionId String

  registeredAt DateTime @default(now())

  score Int @default(0)

  @@id([userEmail, jamSessionId])
}

enum StudentAnswerStatus {
  MISSING
  SUBMITTED
}

model StudentAnswer {
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String

  user      User   @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail String

  status StudentAnswerStatus @default(MISSING)

  multipleChoice StudentAnswerMultipleChoice?
  trueFalse      StudentAnswerTrueFalse?
  essay          StudentAnswerEssay?
  code           StudentAnswerCode?
  web            StudentAnswerWeb?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  studentGrading StudentQuestionGrading?

  @@id([userEmail, questionId])
}

enum StudentQuestionGradingStatus {
  UNGRADED
  GRADED
  AUTOGRADED
}

model StudentQuestionGrading {
  studentAnswer StudentAnswer @relation(fields: [userEmail, questionId], references: [userEmail, questionId], onDelete: Cascade)
  userEmail     String
  questionId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  status         StudentQuestionGradingStatus @default(UNGRADED)
  pointsObtained Int                          @default(0)

  signedBy          User?   @relation(fields: [signedByUserEmail], references: [email])
  signedByUserEmail String?

  comment String?

  @@id([userEmail, questionId])
}

model StudentAnswerMultipleChoice {
  id            String        @id @default(cuid())
  studentAnswer StudentAnswer @relation(fields: [userEmail, questionId], references: [userEmail, questionId], onDelete: Cascade)
  userEmail     String
  questionId    String

  options Option[]

  @@unique([userEmail, questionId])
}

model StudentAnswerTrueFalse {
  studentAnswer StudentAnswer @relation(fields: [userEmail, questionId], references: [userEmail, questionId], onDelete: Cascade)
  userEmail     String
  questionId    String

  isTrue Boolean?

  @@id([userEmail, questionId])
}

model StudentAnswerEssay {
  studentAnswer StudentAnswer @relation(fields: [userEmail, questionId], references: [userEmail, questionId], onDelete: Cascade)
  userEmail     String
  questionId    String

  content String?

  @@id([userEmail, questionId])
}

model StudentAnswerCode {
  studentAnswer StudentAnswer @relation(fields: [userEmail, questionId], references: [userEmail, questionId], onDelete: Cascade)
  userEmail     String
  questionId    String

  files StudentAnswerCodeToFile[]

  // studentAnswerCodeHistory StudentAnswerCodeHistory[]

  testCaseResults TestCaseResult[]

  allTestCasesPassed Boolean @default(false)

  @@id([userEmail, questionId])
}

model TestCaseResult {
  userEmail  String
  questionId String
  index      Int

  studentAnswerCode StudentAnswerCode @relation(fields: [userEmail, questionId], references: [userEmail, questionId], onDelete: Cascade)

  exec           String
  input          String
  output         String
  expectedOutput String

  passed Boolean

  @@id([index, userEmail, questionId])
}

model StudentAnswerCodeToFile {
  studentAnswerCode StudentAnswerCode @relation(fields: [userEmail, questionId], references: [userEmail, questionId], onDelete: Cascade)
  userEmail         String
  questionId        String

  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId String @unique

  studentPermission StudentFilePermission @default(UPDATE)

  @@id([userEmail, questionId, fileId])
}

model StudentAnswerWeb {
  studentAnswer StudentAnswer @relation(fields: [userEmail, questionId], references: [userEmail, questionId], onDelete: Cascade)
  userEmail     String
  questionId    String

  html String?
  css  String?
  js   String?

  @@id([userEmail, questionId])
}

model StudentAnswerCodeHistory {
  // studentAnswerCode StudentAnswerCode @relation(fields: [userEmail, questionId], references: [userEmail, questionId], onDelete: Cascade)
  userEmail  String
  questionId String

  createdAt DateTime @default(now())

  code String?

  @@id([userEmail, questionId, createdAt])
}
